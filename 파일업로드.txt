//참조 사이트 : https://velog.io/@vgo_dongv/Spring-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C

파일 업로드

1. 영화 ID 값 가져오기
SELECT 시퀀스명.nextval AS 변수명 FROM DUAL;


2. 영화 정보 저장

3. 비디오 정보 저장

4. 이미지 정보 저장

<화면>
form속성에 method="post" enctype="multipart/form-data" 추가
파일선택태그에 파라메터로 넘길 때 name에 파라메터명이 설정되어있어야 한다.

<컨트롤러서버>
@PostMapping(value = "/upload") 포스트방식으로 받는다.
파일은 MultipartFile[]객체로 받아야 하며 매개변수에
(@RequestParam("name변수명") MultipartFile[] videoFile, Model model)으로 지정해준다.
//Model은 클라이언트가 넘겨준 값

package com.streaming.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class UploadContoller {
	@GetMapping(value = "/upload")
	public String upload() {
		System.out.println("업로드 성공 확인");
		return "movie/movieForm";
	}

	@PostMapping(value = "/upload")
	public String uploadFormPost(@RequestParam("videoFile") MultipartFile[] videoFile, @RequestParam("imgFile") MultipartFile[] imgFile, Model model) {
		
		
		
		System.out.println("포스트매핑 확인");
		// (1)파일 저장할 위치 설정
		String uploadFolder = "C:\\streaming";
		
		List<String> list = new ArrayList<String>();
		
		//전달된 비디오 파일이 없는 경우
		if (videoFile == null) {
			System.out.println("전달된 비디오 파일이 없다");
		} else {
			list.addAll(uploadFile(uploadFolder, videoFile));
		}
		
		//전달된 이미지 파일이 없는 경우
		if (imgFile == null) {
			System.out.println("전달된 이미지 파일이 없다");
		} else {
			list.addAll(uploadFile(uploadFolder, imgFile));
		}
		
		//list : 파일명들이 들어있음
		model.addAttribute("list", list);
		
		//forward
		return "/movie/movieForm";
	}
	
	private List<String> uploadFile(String uploadFolder, MultipartFile[] uploadFile) {
		List<String> list = new ArrayList<String>();
		
		for(MultipartFile multipartFile : uploadFile) {
			System.out.println("-----------");
			//클라이언트서버에 저장된 파일명
			System.out.println("파일명 : " + multipartFile.getOriginalFilename());
			System.out.println("파일크기 : " + multipartFile.getSize());
			
			// uploadFolder\\gongu03.jpg으로 조립
			// 이렇게 업로드 하겠다라고 설계
			// 서버에 저장하면서 서버에 저장될 이름 설정
			File saveFile = new File(uploadFolder, multipartFile.getOriginalFilename());
			
			try {
				//파일 실제 명을 list에 담음
				list.add(multipartFile.getOriginalFilename());
				//transferTo() : 물리적으로 파일 업로드가 됨
				multipartFile.transferTo(saveFile);
			}catch(Exception e) {
				System.out.println(e.getMessage());
			}//end catch
		}//end for
		
		return list;
	}
}


DTO : 클라이언트에서 서버로 주는 파라미터 객체
Entity : DB 에서 사용할 객체

Controller : url 호출 시 서버에 최초 진입 지점. 클라이언트에 표시할 화면을 return 한다
Service : DB 동작을 Transaction 으로 수행할 수 있다. 실제 기능 구현
Repository : DB 수행 수행 할 쿼리

@RequiredArgsConstructor : 클래스안에 final 전역변수 선언 시 정의 필요 없음
private final MovieRepository movieRepository;


